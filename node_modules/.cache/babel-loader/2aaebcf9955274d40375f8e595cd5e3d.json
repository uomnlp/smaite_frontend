{"ast":null,"code":"import config from \"./config\";\nconst SERVER_PATH = config.server.host;\nconst FACT_API_PATH = config.fact_api_path;\nconst FACT_API_KEY = config.fact_api_key;\n\nconst get = function () {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'private, no-cache, no-store, must-revalidate',\n      'Expires': '-1'\n    },\n    credentials: 'include',\n    errorRedirect: false\n  };\n  return fetch(SERVER_PATH + path, options);\n};\n\nconst factSearch = function () {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'private, no-cache, no-store, must-revalidate',\n      'Expires': '-1'\n    },\n    credentials: 'include',\n    errorRedirect: false\n  };\n  return fetch(FACT_API_PATH + path + new URLSearchParams({\n    key: FACT_API_KEY\n  }), options);\n};\n\nconst post = function () {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'private, no-cache, no-store, must-revalidate',\n      'Expires': '-1'\n    },\n    body: JSON.stringify(body),\n    credentials: 'include'\n  };\n  return fetch(SERVER_PATH + path, options);\n};\n\nconst put = function () {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Pragma': 'no-cache',\n      'Cache-Control': 'private, no-cache, no-store, must-revalidate',\n      'Expires': '-1'\n    },\n    body: JSON.stringify(body),\n    credentials: 'include'\n  };\n  return fetch(SERVER_PATH + path, options);\n};\n\nexport { get, post, put, factSearch };","map":{"version":3,"names":["config","SERVER_PATH","server","host","FACT_API_PATH","fact_api_path","FACT_API_KEY","fact_api_key","get","path","options","method","headers","credentials","errorRedirect","fetch","factSearch","URLSearchParams","key","post","body","JSON","stringify","put"],"sources":["/Users/adityaagarwal/Downloads/SMAITE/smaite_frontend/src/api.js"],"sourcesContent":["import config from \"./config\";\n\nconst SERVER_PATH = config.server.host;\nconst FACT_API_PATH = config.fact_api_path;\nconst FACT_API_KEY = config.fact_api_key;\n\nconst get = (path = '') => {\n    const options = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, must-revalidate', 'Expires': '-1' },\n        credentials: 'include',\n        errorRedirect: false,\n    };\n\n    return fetch(SERVER_PATH + path, options);\n}\n\nconst factSearch = (path = '') => {\n    const options = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, must-revalidate', 'Expires': '-1' },\n        credentials: 'include',\n        errorRedirect: false,\n    };\n\n    return fetch(FACT_API_PATH + path + new URLSearchParams({key:FACT_API_KEY}), options);\n}\n\nconst post = (path = '', body = {}) => {\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, must-revalidate', 'Expires': '-1' },\n        body: JSON.stringify(body),\n        credentials: 'include',\n    };\n\n    return fetch(SERVER_PATH + path, options)\n}\n\nconst put = (path = '', body = {}) => {\n    const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, must-revalidate', 'Expires': '-1' },\n        body: JSON.stringify(body),\n        credentials: 'include'\n    };\n\n    return fetch(SERVER_PATH + path, options);\n}\n\nexport {\n    get,\n    post,\n    put,\n    factSearch\n}"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,MAAMC,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAcC,IAAlC;AACA,MAAMC,aAAa,GAAGJ,MAAM,CAACK,aAA7B;AACA,MAAMC,YAAY,GAAGN,MAAM,CAACO,YAA5B;;AAEA,MAAMC,GAAG,GAAG,YAAe;EAAA,IAAdC,IAAc,uEAAP,EAAO;EACvB,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KADI;IAEZC,OAAO,EAAE;MAAE,gBAAgB,kBAAlB;MAAsC,UAAU,UAAhD;MAA4D,iBAAiB,8CAA7E;MAA6H,WAAW;IAAxI,CAFG;IAGZC,WAAW,EAAE,SAHD;IAIZC,aAAa,EAAE;EAJH,CAAhB;EAOA,OAAOC,KAAK,CAACd,WAAW,GAAGQ,IAAf,EAAqBC,OAArB,CAAZ;AACH,CATD;;AAWA,MAAMM,UAAU,GAAG,YAAe;EAAA,IAAdP,IAAc,uEAAP,EAAO;EAC9B,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KADI;IAEZC,OAAO,EAAE;MAAE,gBAAgB,kBAAlB;MAAsC,UAAU,UAAhD;MAA4D,iBAAiB,8CAA7E;MAA6H,WAAW;IAAxI,CAFG;IAGZC,WAAW,EAAE,SAHD;IAIZC,aAAa,EAAE;EAJH,CAAhB;EAOA,OAAOC,KAAK,CAACX,aAAa,GAAGK,IAAhB,GAAuB,IAAIQ,eAAJ,CAAoB;IAACC,GAAG,EAACZ;EAAL,CAApB,CAAxB,EAAiEI,OAAjE,CAAZ;AACH,CATD;;AAWA,MAAMS,IAAI,GAAG,YAA0B;EAAA,IAAzBV,IAAyB,uEAAlB,EAAkB;EAAA,IAAdW,IAAc,uEAAP,EAAO;EACnC,MAAMV,OAAO,GAAG;IACZC,MAAM,EAAE,MADI;IAEZC,OAAO,EAAE;MAAE,gBAAgB,kBAAlB;MAAsC,UAAU,UAAhD;MAA4D,iBAAiB,8CAA7E;MAA6H,WAAW;IAAxI,CAFG;IAGZQ,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAHM;IAIZP,WAAW,EAAE;EAJD,CAAhB;EAOA,OAAOE,KAAK,CAACd,WAAW,GAAGQ,IAAf,EAAqBC,OAArB,CAAZ;AACH,CATD;;AAWA,MAAMa,GAAG,GAAG,YAA0B;EAAA,IAAzBd,IAAyB,uEAAlB,EAAkB;EAAA,IAAdW,IAAc,uEAAP,EAAO;EAClC,MAAMV,OAAO,GAAG;IACZC,MAAM,EAAE,KADI;IAEZC,OAAO,EAAE;MAAE,gBAAgB,kBAAlB;MAAsC,UAAU,UAAhD;MAA4D,iBAAiB,8CAA7E;MAA6H,WAAW;IAAxI,CAFG;IAGZQ,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAHM;IAIZP,WAAW,EAAE;EAJD,CAAhB;EAOA,OAAOE,KAAK,CAACd,WAAW,GAAGQ,IAAf,EAAqBC,OAArB,CAAZ;AACH,CATD;;AAWA,SACIF,GADJ,EAEIW,IAFJ,EAGII,GAHJ,EAIIP,UAJJ"},"metadata":{},"sourceType":"module"}